[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Baron. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baron K (2023). mrgsim.sa: Sensitivity Analysis 'mrgsolve'. R package version 0.1.0.9002, https://github.com/kylebaron/mrgsim.sa.","code":"@Manual{,   title = {mrgsim.sa: Sensitivity Analysis with 'mrgsolve'},   author = {Kyle Baron},   year = {2023},   note = {R package version 0.1.0.9002},   url = {https://github.com/kylebaron/mrgsim.sa}, }"},{"path":"/index.html","id":"mrgsimsa-sensitivity-analysis-with-mrgsolve","dir":"","previous_headings":"","what":"Sensitivity Analysis with mrgsolve","title":"Sensitivity Analysis with mrgsolve","text":"","code":"library(mrgsim.sa) mod <- mread(\"pk1\", modlib(), end = 48, delta = 0.1) . Building pk1 ... done. param(mod) .  .  Model parameters (N=3): .  name value . name value .  CL   1     | V    20    .  KA   1     | .    ."},{"path":"/index.html","id":"pk-model-sensitivity-analysis-by-factor","dir":"","previous_headings":"","what":"PK model sensitivity analysis by factor","title":"Sensitivity Analysis with mrgsolve","text":"nominal (model) parameter value divided multiplied factor, generating minimum maximum bounds simulating sequence parameter values  simulated data returned long format can plot informative color scale legend","code":"out <-    mod %>%    ev(amt = 100) %>%    select_par(CL, V) %>%    parseq_fct(.n=8) %>%    sens_each()   sens_plot(out, \"CP\") out . # A tibble: 23,232 × 7 .    case  time p_name p_value dv_name dv_value ref_value . * <int> <dbl> <chr>    <dbl> <chr>      <dbl>     <dbl> . 1     1     0 CL         0.5 EV             0         0 . 2     1     0 CL         0.5 EV             0       100 . 3     1     0 CL         0.5 CENT           0         0 . 4     1     0 CL         0.5 CENT           0         0 . 5     1     0 CL         0.5 CP             0         0 . # ℹ 23,227 more rows sens_plot(out, \"CP\", grid = TRUE)"},{"path":"/index.html","id":"hiv-viral-dynamic-model","dir":"","previous_headings":"","what":"HIV viral dynamic model","title":"Sensitivity Analysis with mrgsolve","text":"look latent infected cell pool development ten years different “burst” size, number HIV particles released one cell lyses.","code":"mod <- mread(\"hiv\", \"inst/example\") . Building hiv ... done. mod %>%    update(end = 365*10) %>%   parseq_range(N = c(900,1500), .n = 10) %>%   sens_each(tscale = 1/365) %>%    sens_plot(\"L\", grid = TRUE)"},{"path":"/index.html","id":"sensitivity-analysis-on-custom-sequences","dir":"","previous_headings":"","what":"Sensitivity analysis on custom sequences","title":"Sensitivity Analysis with mrgsolve","text":"model rifampicin PBPK.","code":"mod <- mread(\"inst/example/rifampicin.cpp\") %>% update(delta = 0.1) . Building rifampicin_cpp ... done. mod %>%    ev(amt = 600) %>%    parseq_manual(     SFKp = seq_fct(.$SFKp, n = 20),      Kp_muscle = seq_even(0.001, 0.1, n = 6)   ) %>%    sens_each() %>%    sens_plot(\"Ccentral\")"},{"path":"/index.html","id":"simulate-a-grid","dir":"","previous_headings":"","what":"Simulate a grid","title":"Sensitivity Analysis with mrgsolve","text":"point, always used sens_each value parameter simulated one time. Now, simulate grid combinations. use parseq_cv , generates lower upper bounds range using 50% coefficient variation.","code":"out <-    mod %>%    update(outvars = \"Ccentral\") %>%   ev(amt = 600) %>%    parseq_cv(fBCLint_all_kg, .n = 7) %>%    parseq_cv(SFKp, Kp_muscle, .n = 3) %>%    sens_grid(recsort = 3)   out . # A tibble: 15,372 × 8 .    case fBCLint_all_kg  SFKp Kp_muscle  time dv_name  dv_value ref_value . * <int>          <dbl> <dbl>     <dbl> <dbl> <chr>       <dbl>     <dbl> . 1     1          0.138  3.65    0.0520   0   Ccentral     0         0    . 2     1          0.138  3.65    0.0520   0   Ccentral     0         0    . 3     1          0.138  3.65    0.0520   0   Ccentral     0         0    . 4     1          0.138  3.65    0.0520   0   Ccentral     0         0    . 5     1          0.138  3.65    0.0520   0.1 Ccentral     3.66      3.14 . # ℹ 15,367 more rows out %>% sens_plot(\"Ccentral\")"},{"path":"/index.html","id":"local-sensitivity-analysis","dir":"","previous_headings":"","what":"Local sensitivity analysis","title":"Sensitivity Analysis with mrgsolve","text":"","code":"mod <- modlib(\"pk2\", delta = 0.1, end = 72) . Building pk2 ... done. doses <- ev(amt = 100)  out <- lsa(mod, var = \"CP\", par = \"CL,V2,Q\", events = doses)  out . # A tibble: 2,166 × 5 .    time dv_name dv_value p_name     sens .   <dbl> <chr>      <dbl> <chr>     <dbl> . 1   0   CP         0     CL      0       . 2   0   CP         0     CL      0       . 3   0.1 CP         0.472 CL     -0.00254 . 4   0.2 CP         0.893 CL     -0.00514 . 5   0.3 CP         1.27  CL     -0.00782 . # ℹ 2,161 more rows lsa_plot(out, pal = NULL)"},{"path":"/reference/as.data.frame.sens_each.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sens_each output to data frame — as.data.frame.sens_each","title":"Coerce sens_each output to data frame — as.data.frame.sens_each","text":"Coerce sens_each output data frame","code":""},{"path":"/reference/as.data.frame.sens_each.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sens_each output to data frame — as.data.frame.sens_each","text":"","code":"# S3 method for sens_each as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"/reference/as.data.frame.sens_each.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sens_each output to data frame — as.data.frame.sens_each","text":"x sense_each object. row.names used. optional used. ... used.","code":""},{"path":"/reference/denest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest a sens_each object — denest","title":"Unnest a sens_each object — denest","text":"Unnest sens_each object","code":""},{"path":"/reference/denest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest a sens_each object — denest","text":"","code":"denest(x, keep_id = FALSE)"},{"path":"/reference/denest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest a sens_each object — denest","text":"x sens_each object. keep_id FALSE ID column removed .","code":""},{"path":"/reference/denest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest a sens_each object — denest","text":"x returned unnesting possible modification.","code":""},{"path":"/reference/lsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform local sensitivity analysis — lsa","title":"Perform local sensitivity analysis — lsa","text":"Perform local sensitivity analysis","code":""},{"path":"/reference/lsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform local sensitivity analysis — lsa","text":"","code":"lsa(mod, par, var, fun = .lsa_fun, eps = 1e-08, ...)  lsa_plot(x, ...)"},{"path":"/reference/lsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform local sensitivity analysis — lsa","text":"mod mrgsolve model object. par parameter names character vector comma-separated string. var output names (compartment capture) character vector comma-separated string. fun generating simulated sensitivity analysis (see details). eps parameter change value sensitivity analysis. ... passed plot.lsa(). x output lsa().","code":""},{"path":"/reference/lsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform local sensitivity analysis — lsa","text":"tibble class lsa.","code":""},{"path":"/reference/lsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform local sensitivity analysis — lsa","text":"","code":"mod <- mrgsolve::house(delta=0.1)  par <- \"CL,VC,KA\"  var <- \"CP\"  dose <- ev(amt = 100)  fun <- function(mod, ...) mrgsolve::mrgsim_e(mod, dose, output=\"df\")  out <- lsa(mod, par, var, fun)  head(out) #> # A tibble: 6 × 5 #>    time dv_name dv_value p_name     sens #>   <dbl> <chr>      <dbl> <chr>     <dbl> #> 1   0   CP         0     CL      0       #> 2   0   CP         0     CL      0       #> 3   0.1 CP         0.564 CL     -0.00254 #> 4   0.2 CP         1.06  CL     -0.00519 #> 5   0.3 CP         1.50  CL     -0.00793 #> 6   0.4 CP         1.89  CL     -0.0108   lsa_plot(out)"},{"path":"/reference/mrgsim.sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity Analysis with 'mrgsolve' — mrgsim.sa","title":"Sensitivity Analysis with 'mrgsolve' — mrgsim.sa","text":"Perform local sensitivity analysis ordinary differential equation based models, including ad-hoc graphical analyses based sequences parameters well local sensitivity analysis. Functions provided creating inputs, simulating scenarios plotting outputs.","code":""},{"path":"/reference/mrgsim.sa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sensitivity Analysis with 'mrgsolve' — mrgsim.sa","text":"Local sensitivity analysis: lsa() Run ad-hoc sensitivity analyses: sens_each(), sens_grid(), sens_run() Use sens_each_data() sens_grid_data() pass data sets Parameter sequence generation: pipeline: parseq_cv(), parseq_fct(), parseq_range(), parseq_manual() Stand alone: seq_cv(), seq_fct(), seq_geo(), seq_even()","code":""},{"path":"/reference/parseq_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence of parameters based on CV — parseq_cv","title":"Generate a sequence of parameters based on CV — parseq_cv","text":"Generate sequence parameters based CV","code":""},{"path":"/reference/parseq_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence of parameters based on CV — parseq_cv","text":"","code":"parseq_cv(mod, ..., .cv = 30, .n = 5, .nsd = 2, .digits = NULL)"},{"path":"/reference/parseq_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence of parameters based on CV — parseq_cv","text":"mod model object. ... model parameter names. .cv coefficient variation used determine range test parameters. .n number parameters simulate sequence. .nsd number standard deviations used determine range. .digits numeric, number significant digits parameter sensitivity values set using base::signif().","code":""},{"path":"/reference/parseq_cv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a sequence of parameters based on CV — parseq_cv","text":".cv  passed seq_cv() cv .n   passed seq_cv() n .nsd passed seq_cv() nsd","code":""},{"path":[]},{"path":"/reference/parseq_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a sequence of parameters based on CV — parseq_cv","text":"","code":"mod <- mrgsolve::house()  mod %>%   parseq_cv(CL,VC) %>%    sens_each() #> # A tibble: 24,050 × 7 #>     case  time p_name p_value dv_name dv_value ref_value #>  * <int> <dbl> <chr>    <dbl> <chr>      <dbl>     <dbl> #>  1     1  0    CL       0.549 GUT            0         0 #>  2     1  0    CL       0.549 CENT           0         0 #>  3     1  0    CL       0.549 RESP          50        50 #>  4     1  0    CL       0.549 DV             0         0 #>  5     1  0    CL       0.549 CP             0         0 #>  6     1  0.25 CL       0.549 GUT            0         0 #>  7     1  0.25 CL       0.549 CENT           0         0 #>  8     1  0.25 CL       0.549 RESP          50        50 #>  9     1  0.25 CL       0.549 DV             0         0 #> 10     1  0.25 CL       0.549 CP             0         0 #> # ℹ 24,040 more rows"},{"path":"/reference/parseq_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence of parameters — parseq_fct","title":"Generate a sequence of parameters — parseq_fct","text":"Generate sequence parameters","code":""},{"path":"/reference/parseq_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence of parameters — parseq_fct","text":"","code":"parseq_fct(mod, ..., .n = 5, .factor = 2, .geo = TRUE, .digits = NULL)  parseq_factor(mod, ..., .n = 5, .factor = 2, .geo = TRUE, .digits = NULL)"},{"path":"/reference/parseq_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence of parameters — parseq_fct","text":"mod model object. ... unquoted parameter names. .n number parameters simulate minimum maximum parameter values. .factor numeric vector used divide multiply parameter value thus generating minimum maximum parameter values, respectively, sequence; .factor length 1 recycled length 2; first value used divide nominal value generating minimum value; second value used multiply nominal value generating maximum value. .geo TRUE geometric sequence generated (evenly spaced min max log scale); otherwise, sequence evenly spaced Cartesian scale. .digits numeric, number significant digits parameter sensitivity values set using base::signif().","code":""},{"path":"/reference/parseq_fct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a sequence of parameters — parseq_fct","text":".n       passed seq_fct() n .factor  passed seq_fct() factor","code":""},{"path":[]},{"path":"/reference/parseq_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a sequence of parameters — parseq_fct","text":"","code":"mod <- mrgsolve::house()  mod %>%   parseq_fct(CL,VC) %>%    sens_each() #> # A tibble: 24,050 × 7 #>     case  time p_name p_value dv_name dv_value ref_value #>  * <int> <dbl> <chr>    <dbl> <chr>      <dbl>     <dbl> #>  1     1  0    CL         0.5 GUT            0         0 #>  2     1  0    CL         0.5 CENT           0         0 #>  3     1  0    CL         0.5 RESP          50        50 #>  4     1  0    CL         0.5 DV             0         0 #>  5     1  0    CL         0.5 CP             0         0 #>  6     1  0.25 CL         0.5 GUT            0         0 #>  7     1  0.25 CL         0.5 CENT           0         0 #>  8     1  0.25 CL         0.5 RESP          50        50 #>  9     1  0.25 CL         0.5 DV             0         0 #> 10     1  0.25 CL         0.5 CP             0         0 #> # ℹ 24,040 more rows"},{"path":"/reference/parseq_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation helper to manually specify parameter sequences — parseq_manual","title":"Simulation helper to manually specify parameter sequences — parseq_manual","text":"Simulation helper manually specify parameter sequences","code":""},{"path":"/reference/parseq_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation helper to manually specify parameter sequences — parseq_manual","text":"","code":"parseq_manual(mod, ...)"},{"path":"/reference/parseq_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation helper to manually specify parameter sequences — parseq_manual","text":"mod mrgsolve model object. ... named numeric vectors parameter values simulate; names must correspond parameters model object.","code":""},{"path":[]},{"path":"/reference/parseq_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation helper to manually specify parameter sequences — parseq_manual","text":"","code":"mod <- mrgsolve::house()  mod %>%   parseq_manual(CL = c(0.5, 1, 1.5)) %>%    sens_each() #> # A tibble: 7,215 × 7 #>     case  time p_name p_value dv_name dv_value ref_value #>  * <int> <dbl> <chr>    <dbl> <chr>      <dbl>     <dbl> #>  1     1  0    CL         0.5 GUT            0         0 #>  2     1  0    CL         0.5 CENT           0         0 #>  3     1  0    CL         0.5 RESP          50        50 #>  4     1  0    CL         0.5 DV             0         0 #>  5     1  0    CL         0.5 CP             0         0 #>  6     1  0.25 CL         0.5 GUT            0         0 #>  7     1  0.25 CL         0.5 CENT           0         0 #>  8     1  0.25 CL         0.5 RESP          50        50 #>  9     1  0.25 CL         0.5 DV             0         0 #> 10     1  0.25 CL         0.5 CP             0         0 #> # ℹ 7,205 more rows"},{"path":"/reference/parseq_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation helper to generate a sequence of parameters from a range — parseq_range","title":"Simulation helper to generate a sequence of parameters from a range — parseq_range","text":"Simulation helper generate sequence parameters range","code":""},{"path":"/reference/parseq_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation helper to generate a sequence of parameters from a range — parseq_range","text":"","code":"parseq_range(mod, ..., .n = 5, .geo = TRUE, .digits = NULL)"},{"path":"/reference/parseq_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation helper to generate a sequence of parameters from a range — parseq_range","text":"mod mrgsolve model object. ... unquoted parameter names. .n number values simulate parameter sequence. .geo TRUE generate geometric sequence; otherwise, generate sequence evenly spaced Cartesian scale; see seq_geo(). .digits numeric, number significant digits parameter sensitivity values set using base::signif().","code":""},{"path":"/reference/parseq_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation helper to generate a sequence of parameters from a range — parseq_range","text":".n  passed seq_geo() n","code":""},{"path":[]},{"path":"/reference/parseq_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation helper to generate a sequence of parameters from a range — parseq_range","text":"","code":"mod <- mrgsolve::house()  mod %>%   parseq_range(CL = c(0.5,1),VC = c(10,40)) %>%    sens_each() #> # A tibble: 24,050 × 7 #>     case  time p_name p_value dv_name dv_value ref_value #>  * <int> <dbl> <chr>    <dbl> <chr>      <dbl>     <dbl> #>  1     1  0    CL         0.5 GUT            0         0 #>  2     1  0    CL         0.5 CENT           0         0 #>  3     1  0    CL         0.5 RESP          50        50 #>  4     1  0    CL         0.5 DV             0         0 #>  5     1  0    CL         0.5 CP             0         0 #>  6     1  0.25 CL         0.5 GUT            0         0 #>  7     1  0.25 CL         0.5 CENT           0         0 #>  8     1  0.25 CL         0.5 RESP          50        50 #>  9     1  0.25 CL         0.5 DV             0         0 #> 10     1  0.25 CL         0.5 CP             0         0 #> # ℹ 24,040 more rows"},{"path":"/reference/parseq_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Set reference values for each parameter — parseq_reference","title":"Set reference values for each parameter — parseq_reference","text":"Set reference values parameter","code":""},{"path":"/reference/parseq_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set reference values for each parameter — parseq_reference","text":"","code":"parseq_reference(mod, auto = TRUE)"},{"path":"/reference/parseq_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set reference values for each parameter — parseq_reference","text":"mod model object. auto TRUE model parameter list used.","code":""},{"path":"/reference/plot.lsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a lsa object — plot.lsa","title":"Plot a lsa object — plot.lsa","text":"Plot lsa object","code":""},{"path":"/reference/plot.lsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a lsa object — plot.lsa","text":"","code":"# S3 method for lsa plot(x, y = NULL, pal = NULL, ...)"},{"path":"/reference/plot.lsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a lsa object — plot.lsa","text":"x output lsa(). y used. pal color palette passed ggplot2::scale_color_brewer(); use NULL use default ggplot color scale. ... used.","code":""},{"path":"/reference/plot.lsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a lsa object — plot.lsa","text":"ggplot.","code":""},{"path":"/reference/select_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify parameters in a model for sensitivity analysis — select_par","title":"Identify parameters in a model for sensitivity analysis — select_par","text":"Identify parameters model sensitivity analysis","code":""},{"path":"/reference/select_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify parameters in a model for sensitivity analysis — select_par","text":"","code":"select_par(mod, ...)"},{"path":"/reference/select_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify parameters in a model for sensitivity analysis — select_par","text":"mod mrgsolve model object. ... unquoted parameter names.","code":""},{"path":"/reference/select_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify parameters in a model for sensitivity analysis — select_par","text":"","code":"mod <- mrgsolve::house() select_par(mod, CL, VC) #>  #>  #> --------------  source: housemodel.cpp  -------------- #>  #>   project: /Users/kyleb/Lib...solve/project #>   shared object: mrgsolve  #>  #>   time:          start: 0 end: 120 delta: 0.25 #>                  add: <none> #>  #>   compartments:  GUT CENT RESP [3] #>   parameters:    CL VC KA F1 D1 WTCL WTVC SEXCL SEXVC #>                  KIN KOUT IC50 WT SEX [14] #>   captures:      DV CP [2] #>   omega:         4x4  #>   sigma:         1x1  #>  #>   solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k #> ------------------------------------------------------"},{"path":"/reference/select_sens.html","id":null,"dir":"Reference","previous_headings":"","what":"Select sensitivity runs from a sens_each object — select_sens","title":"Select sensitivity runs from a sens_each object — select_sens","text":"Select sensitivity runs sens_each object","code":""},{"path":"/reference/select_sens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select sensitivity runs from a sens_each object — select_sens","text":"","code":"select_sens(x, dv_name = NULL, p_name = NULL)"},{"path":"/reference/select_sens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select sensitivity runs from a sens_each object — select_sens","text":"x sens_each object. dv_name character names dependent variables select; can comma-separated string. p_name character names parameters select; can comma-separated string.","code":""},{"path":"/reference/select_sens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select sensitivity runs from a sens_each object — select_sens","text":"updated sens_each object returned.","code":""},{"path":"/reference/select_sens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select sensitivity runs from a sens_each object — select_sens","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  mod <- mrgsolve::house()  out1 <- mod %>% parseq_factor(CL,VC) %>% sens_each()  out2 <- select_sens(out1, dv_name = \"CP\", p_name = \"CL\")"},{"path":"/reference/sens_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an ad-hoc sensitivity analysis — sens_fun","title":"Run an ad-hoc sensitivity analysis — sens_fun","text":"Use sens_each() examine sequences parameters one time.  Use sens_grid() examine combinations sequences parameters. sens_each_data() sens_grid_data() variants allow pass data set simulate .","code":""},{"path":"/reference/sens_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an ad-hoc sensitivity analysis — sens_fun","text":"","code":"sens_each(mod, idata = NULL, ...)  sens_each_data(mod, data, idata = NULL, ...)  sens_grid(mod, idata = NULL, ...)  sens_grid_data(mod, data, idata = NULL, ...)"},{"path":"/reference/sens_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an ad-hoc sensitivity analysis — sens_fun","text":"mod mrgsolve model object (usually read mrgsolve::mread()). idata included prevent users passing ; function create idata_set appropriate. ... passed mrgsolve::mrgsim_d(). data simulation input data set (see mrgsolve::data_set()).","code":""},{"path":"/reference/sens_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an ad-hoc sensitivity analysis — sens_fun","text":"tibble-like object class sens_each sens_grid, depending vary method used.  objects look just like tibble, can plotted sens_plot().","code":""},{"path":[]},{"path":"/reference/sens_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an ad-hoc sensitivity analysis — sens_fun","text":"","code":"mod <- mrgsolve::house()  dose <- mrgsolve::ev(amt = 100)  out_each <- parseq_cv(mod, CL, VC) %>% sens_each()  out_grid <- parseq_cv(mod, CL, VC) %>% sens_grid()"},{"path":"/reference/sens_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sensitivity analysis results — sens_plot","title":"Plot sensitivity analysis results — sens_plot","text":"Plot sensitivity analysis results","code":""},{"path":"/reference/sens_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sensitivity analysis results — sens_plot","text":"","code":"sens_plot(data, ...)  # S3 method for sens_each sens_plot(   data,   dv_name = NULL,   p_name = NULL,   logy = FALSE,   ncol = NULL,   lwd = 0.8,   digits = 3,   plot_ref = TRUE,   xlab = \"time\",   ylab = dv_name[1],   layout = c(\"default\", \"facet_grid\", \"facet_wrap\", \"list\"),   grid = FALSE,   ... )  # S3 method for sens_grid sens_plot(   data,   dv_name,   digits = 2,   ncol = NULL,   lwd = 0.8,   logy = FALSE,   plot_ref = TRUE,   ... )"},{"path":"/reference/sens_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sensitivity analysis results — sens_plot","text":"data output sens_each() sens_grid(). ... arguments passed methods. dv_name output columns name plot; can comma-separated string. p_name parameter names plot; can comma-separates string. logy TRUE, y-axis transformed log scale ncol passed ggplot2::facet_wrap(). lwd passed ggplot2::geom_line(). digits used format numbers strips. plot_ref TRUE, reference case plotted black dashed line. xlab x-axis title. ylab y-axis title; used facet_grid facet_wrap layouts. layout specifies plots returned dv_name requests multiple dependent variables; see Details. grid TRUE, plots sens_each method arranged page patchwork::wrap_plots(); see ncol argument.","code":""},{"path":"/reference/sens_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot sensitivity analysis results — sens_plot","text":"layout argument get plots back different formats multiple dependent variables requested via dv_name. Use default get plots back list multiple dependent variables requested otherwise single plot returned. Use facet_grid get single plot, parameters columns dependent variables rows. Use facet_wrap get plot faceted using ggplot2::facet_wrap(), parameter name dependent variable name strip. Use list force output list plots; output can arranged using patchwork::wrap_plots() desired. grid TRUE, list plots returned multiple dependent variables requested.","code":""},{"path":"/reference/sens_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sensitivity analysis results — sens_plot","text":"","code":"mod <- mrgsolve::house() dose <- mrgsolve::ev(amt = 100) out <- sens_run(mod, sargs = list(events = dose),  par = \"CL,VC\")  sens_plot(out, dv_name = \"CP\")"},{"path":"/reference/sens_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ad-hoc parameter sensitivity analyses with mrgsolve — sens_run","title":"Run ad-hoc parameter sensitivity analyses with mrgsolve — sens_run","text":"Run ad-hoc parameter sensitivity analyses mrgsolve","code":""},{"path":"/reference/sens_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ad-hoc parameter sensitivity analyses with mrgsolve — sens_run","text":"","code":"sens_run(   mod,   par = NULL,   var = NULL,   method = c(\"factor\", \"cv\", \"range\", \"manual\"),   vary = c(\"each\", \"grid\"),   ...,   sargs = list() )"},{"path":"/reference/sens_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ad-hoc parameter sensitivity analyses with mrgsolve — sens_run","text":"mod mrgsolve model object. par parameter names sensitivity analysis; can character vector comma-separated string (see examples). var names model output variables include simulated output; name compartment another output derived inside model (e.g. DV CP logV, specific coded mod). method parameter sequence generation method. vary use vary one parameter time grid vary combinations parameters. ... passed method function. sargs named list arguments passed sens_each() sens_grid() eventually mrgsolve::mrgsim().","code":""},{"path":"/reference/sens_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ad-hoc parameter sensitivity analyses with mrgsolve — sens_run","text":"","code":"mod <- mrgsolve::house()  dose <- mrgsolve::ev(amt = 100)  sens_run(   mod,    par = \"CL,VC\",    method = \"cv\",    vary = \"each\",    sargs = list(events = dose) ) #> # A tibble: 24,200 × 7 #>     case  time p_name p_value dv_name dv_value ref_value #>  * <int> <dbl> <chr>    <dbl> <chr>      <dbl>     <dbl> #>  1     1     0 CL       0.549 GUT            0         0 #>  2     1     0 CL       0.549 GUT            0       100 #>  3     1     0 CL       0.549 CENT           0         0 #>  4     1     0 CL       0.549 CENT           0         0 #>  5     1     0 CL       0.549 RESP          50        50 #>  6     1     0 CL       0.549 RESP          50        50 #>  7     1     0 CL       0.549 DV             0         0 #>  8     1     0 CL       0.549 DV             0         0 #>  9     1     0 CL       0.549 CP             0         0 #> 10     1     0 CL       0.549 CP             0         0 #> # ℹ 24,190 more rows"},{"path":"/reference/seq_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence based on coefficient of variation — seq_cv","title":"Generate a sequence based on coefficient of variation — seq_cv","text":"Generate sequence based coefficient variation","code":""},{"path":"/reference/seq_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence based on coefficient of variation — seq_cv","text":"","code":"seq_cv(point, cv = 30, n = 5, nsd = 2, digits = NULL)"},{"path":"/reference/seq_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence based on coefficient of variation — seq_cv","text":"point reference parameter value. cv coefficient variation. n number values simulate sequence. nsd number standard deviations defining range simulated parameter values. digits number significant digits answer; NULL (default) digits retained.","code":""},{"path":"/reference/seq_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a sequence based on coefficient of variation — seq_cv","text":"","code":"seq_cv(10) #> [1]  5.488116  7.408182 10.000000 13.498588 18.221188"},{"path":"/reference/seq_even.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate evenly spaced sequence — seq_even","title":"Generate evenly spaced sequence — seq_even","text":"Generate evenly spaced sequence","code":""},{"path":"/reference/seq_even.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate evenly spaced sequence — seq_even","text":"","code":"seq_even(from, to, n = 5, digits = NULL)"},{"path":"/reference/seq_even.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate evenly spaced sequence — seq_even","text":"passed base::seq(). passed base::seq(). n passed base::seq() length.. digits number significant digits answer; NULL (default) digits retained.","code":""},{"path":"/reference/seq_even.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate evenly spaced sequence — seq_even","text":"","code":"seq_even(1, 10, 4) #> [1]  1  4  7 10"},{"path":"/reference/seq_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence by fold increase and decrease from a point — seq_fct","title":"Generate a sequence by fold increase and decrease from a point — seq_fct","text":"Generate sequence fold increase decrease point","code":""},{"path":"/reference/seq_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence by fold increase and decrease from a point — seq_fct","text":"","code":"seq_fct(point, n = 5, factor = c(3, 3), geo = TRUE, digits = NULL)"},{"path":"/reference/seq_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence by fold increase and decrease from a point — seq_fct","text":"point numeric vector length 1. n number elements sequence. factor integer vector length 1 2; length 1, values recycled length 2; first number used divide point generate minimum value sequence; second number used multiply point generate maximum value sequence. geo TRUE, seq_geo() used generate sequence; otherwise, seq_even() used generate sequence. digits number significant digits answer; NULL (default) digits retained.","code":""},{"path":"/reference/seq_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a sequence by fold increase and decrease from a point — seq_fct","text":"","code":"seq_fct(10) #> [1]  3.333333  5.773503 10.000000 17.320508 30.000000"},{"path":"/reference/seq_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a geometric sequence of parameter values — seq_geo","title":"Generate a geometric sequence of parameter values — seq_geo","text":"Generate geometric sequence parameter values","code":""},{"path":"/reference/seq_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a geometric sequence of parameter values — seq_geo","text":"","code":"seq_geo(from, to, n = 5, digits = NULL)"},{"path":"/reference/seq_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a geometric sequence of parameter values — seq_geo","text":"passed base::seq(). passed base::seq(). n passed base::seq() length.. digits number significant digits answer; NULL (default) digits retained.","code":""},{"path":"/reference/seq_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a geometric sequence of parameter values — seq_geo","text":"","code":"seq_geo(1,10,10) #>  [1]  1.000000  1.291550  1.668101  2.154435  2.782559  3.593814  4.641589 #>  [8]  5.994843  7.742637 10.000000"},{"path":[]},{"path":"/news/index.html","id":"mrgsimsa-010","dir":"Changelog","previous_headings":"","what":"mrgsim.sa 0.1.0","title":"mrgsim.sa 0.1.0","text":"CRAN release: 2020-11-30 Development initial version","code":""}]
